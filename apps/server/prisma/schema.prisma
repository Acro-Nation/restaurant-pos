generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         User[] // Relation to users of the tenant
  restaurant    Restaurant? // One-to-one relation with restaurant
  subscriptions Subscription[] // Relation to subscriptions in the tenant
  orderProducts OrderProduct[]
  products      Product[]
  orders        Order[]
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  address   String
  tenantId  String   @unique // Foreign key to Tenant (unique for one-to-one)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  // Admin relation defined here
  adminId   String?  @unique
  admin     User?    @relation("RestaurantAdmin", fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  // Relation to orders for this restaurant
  products  Product[] // Relation to products for this restaurant

  managers  User[]   @relation("Manager") // Additional managers
  waiters   User[]   @relation("Waiter")  // Waiters for this restaurant
  chefs     User[]   @relation("Chef")    // Chefs for this restaurant
}

model User {
  id                 String       @id @default(uuid())
  name               String
  email              String       @unique
  password           String
  role               UserRole
  tenantId          String       // Foreign key to Tenant
  tenant            Tenant       @relation(fields: [tenantId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relationships for restaurant roles
  ordersAsWaiter    Order[]      @relation("WaiterOrders")
  managedRestaurants Restaurant[] @relation("Manager")
  waitingRestaurants Restaurant[] @relation("Waiter")
  chefRestaurants    Restaurant[] @relation("Chef")

  // Relation to restaurant as primary admin (one-to-one)
  adminOfRestaurant Restaurant?  @relation("RestaurantAdmin")
}

model Subscription {
  id                 String             @id @default(uuid())
  tenantId           String // Foreign key to Tenant
  tenant             Tenant             @relation(fields: [tenantId], references: [id]) // Reverse relation
  startDate          DateTime
  endDate            DateTime
  status             SubscriptionStatus
  billingCycle       BillingCycle
  costPerMonth       Float
  orderPercentageFee Float
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  restaurantId String
  waiterId     String
  amount       Float
  status       OrderStatus
  createdAt    DateTime    @default(now())
  completedAt  DateTime?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  waiter       User        @relation(name: "WaiterOrders", fields: [waiterId], references: [id])
  products     OrderProduct[] // Relation to order products
  tenantId     String
  tenant       Tenant      @relation(fields: [tenantId], references: [id])
}

model Product {
  id           String         @id @default(uuid())
  title        String
  price        Int
  description  String
  restaurantId String        // Foreign key to Restaurant
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  orders       OrderProduct[] // Relation to orders through OrderProduct
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tenantId     String        // Foreign key to Tenant
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
}

// Junction table for Order-Product many-to-many relationship
model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  tenantId  String  // Foreign key to Tenant
  tenant    Tenant  @relation(fields: [tenantId], references: [id])

  @@unique([orderId, productId])
}

// Role and Status Enums
enum UserRole {
  SUPER_ADMIN
  RESTAURANT_ADMIN
  MANAGER
  WAITER
  CHEF
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
