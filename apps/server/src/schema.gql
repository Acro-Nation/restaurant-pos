# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tenant {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: UserRole!
  tenantId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  SUPER_ADMIN
  RESTAURANT_ADMIN
  MANAGER
  WAITER
  CHEF
}

type Restaurant {
  id: ID!
  name: String!
  address: String!
  tenantId: String!
  admin: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EncryptResponse {
  success: Boolean!
  data: String
  message: String!
}

type LoginResponse {
  message: String!
}

type RefreshTokenResponse {
  message: String!
}

type Subscription {
  id: ID!
  tenantId: String!
  startDate: DateTime!
  endDate: DateTime!
  status: SubscriptionStatus!
  billingCycle: BillingCycle!
  costPerMonth: Float!
  orderPercentageFee: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

type Order {
  id: String!
  tenantId: String!
  restaurantId: String!
  waiterId: String!
  amount: Float!
  status: String!
  createdAt: DateTime!
  completedAt: DateTime
}

type Query {
  getHello: String!
  getAllUsers(page: Int! = 1, limit: Int! = 10): EncryptResponse!
  getAllRestaurants(page: Int! = 1, limit: Int! = 10): [Restaurant!]!
  getAllTenants: [Tenant!]!
  getAllSubscriptions: [Subscription!]!
  getAllOrders(page: Int! = 1, limit: Int! = 10): [Order!]!
  getOrderById(orderId: String!): Order!
}

type Mutation {
  login(loginDto: LoginDto!): LoginResponse!
  refreshToken: RefreshTokenResponse!
  logout: String!
  createUser(name: String!, email: String!, password: String!, role: UserRole!): EncryptResponse!
  createRestaurantWithOwner(tenantId: String!, restaurantData: CreateRestaurantInput!, ownerData: CreateOwnerInput!): Restaurant!
  createTenant(name: String!): Tenant!
  updateSubscriptionStatus(subscriptionId: String!, status: SubscriptionStatus!): Subscription!
  deleteSubscription(subscriptionId: String!): Subscription!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrderStatus(orderId: String!, updateOrderInput: UpdateOrderInput!): Order!
}

input LoginDto {
  email: String!
  password: String!
}

input CreateRestaurantInput {
  name: String!
  address: String!
}

input CreateOwnerInput {
  name: String!
  email: String!
  password: String!
  tenantId: String!
  role: UserRole!
}

input CreateOrderInput {
  tenantId: String!
  restaurantId: String!
  waiterId: String!
  totalAmount: Float!
}

input UpdateOrderInput {
  status: OrderStatus!
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}