# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LoginResponse {
  message: String!
}

type RefreshTokenResponse {
  message: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: UserRole!
  tenantId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  SUPER_ADMIN
  RESTAURANT_ADMIN
  MANAGER
  WAITER
  CHEF
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EncryptResponse {
  success: Boolean!
  data: String
  message: String!
}

type Product {
  id: ID!
  title: String!
  price: Int!
  description: String!
  restaurantId: String!
  tenantId: String!
  orders: [OrderProduct!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderProduct {
  id: ID!
  orderId: String!
  productId: String!
  quantity: Int!
  tenantId: String!
  order: Order
  product: Product
}

type Order {
  id: ID!
  tenantId: String!
  restaurantId: String!
  waiterId: String!
  amount: Float!
  status: OrderStatus!
  createdAt: DateTime!
  completedAt: DateTime
  products: [OrderProduct!]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

type Notification {
  id: ID!
  type: NotificationType!
  title: String!
  message: String!
  tenantId: String!
  orderId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Type of Notification"""
enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_COMPLETED
  ORDER_CANCELLED
  SUBSCRIPTION_EXPIRING
  NEW_PRODUCT_ADDED
}

type NotificationSubscriptionPayload {
  notification: Notification!
}

type Tenant {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BusinessSubscription {
  id: ID!
  tenantId: String!
  startDate: DateTime!
  endDate: DateTime!
  status: SubscriptionStatus!
  billingCycle: BillingCycle!
  costPerMonth: Float!
  orderPercentageFee: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

type Query {
  getHello: String!
  getAllUsers(page: Int! = 1, limit: Int! = 10): EncryptResponse!
  getAllRestaurants(page: Int! = 1, limit: Int! = 10): EncryptResponse!
  getAllTenants: [Tenant!]!
  getAllSubscriptions: [BusinessSubscription!]!
  getAllProducts(page: Int! = 1, limit: Int! = 10): EncryptResponse!
  getProduct(id: String!): EncryptResponse!
  getAllOrders(page: Int! = 1, limit: Int! = 10): EncryptResponse!
  getOrderById(orderId: String!): Order!
  getAllNotifications(page: Int! = 1, limit: Int! = 10): [Notification!]!
  getNotificationById(id: String!): Notification!
}

type Mutation {
  login(loginDto: LoginDto!): LoginResponse!
  refreshToken: RefreshTokenResponse!
  logout: String!
  createUser(name: String!, email: String!, password: String!, role: UserRole!): EncryptResponse!
  createRestaurantWithOwner(tenantId: String!, restaurantData: CreateRestaurantInput!, ownerData: CreateOwnerInput!): EncryptResponse!
  createTenant(name: String!): Tenant!
  updateSubscriptionStatus(subscriptionId: String!, status: SubscriptionStatus!): BusinessSubscription!
  deleteSubscription(subscriptionId: String!): BusinessSubscription!
  createProduct(createProductInput: CreateProductInput!): EncryptResponse!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): EncryptResponse!
  removeProduct(id: String!): EncryptResponse!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrderStatus(orderId: String!, updateOrderInput: UpdateOrderInput!): Order!
  createNotification(createNotificationInput: CreateNotificationInput!): EncryptResponse!
  updateNotification(id: String!, updateNotificationInput: UpdateNotificationInput!): EncryptResponse!
  removeNotification(id: String!): EncryptResponse!
  testNotification: Boolean!
}

input LoginDto {
  email: String!
  password: String!
}

input CreateRestaurantInput {
  name: String!
  address: String!
}

input CreateOwnerInput {
  name: String!
  email: String!
  password: String!
  tenantId: String!
  role: UserRole!
}

input CreateProductInput {
  title: String!
  description: String!
  price: Int!
  restaurantId: String!
}

input UpdateProductInput {
  title: String
  description: String
  price: Int
  restaurantId: String
}

input CreateOrderInput {
  tenantId: String!
  restaurantId: String!
  waiterId: String!
  totalAmount: Float!
  products: [OrderProductInput!]!
}

input OrderProductInput {
  productId: String!
  title: String!
  quantity: Int!
}

input UpdateOrderInput {
  status: OrderStatus!
}

input CreateNotificationInput {
  type: NotificationType!
  title: String!
  message: String!
  tenantId: String!
  orderId: String
}

input UpdateNotificationInput {
  type: NotificationType
  title: String
  message: String
  tenantId: String
  orderId: String
}

type Subscription {
  notificationCreated: NotificationSubscriptionPayload!
}